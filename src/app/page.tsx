'use client'

import React, { useState, Suspense, lazy, useEffect } from 'react'
import Layout from '@/components/layout/Layout'
import ProtectedRoute from '@/components/auth/ProtectedRoute'
import Card from '@/components/ui/Card'
import Button from '@/components/ui/Button'
import FabButton from '@/components/ui/FabButton'
import Toast from '@/components/ui/Toast'
import { useAuth } from '@/contexts/AuthContext'
import { useRouter } from 'next/navigation'
import { Plus, TrendingUp, Calendar, Settings, Loader2 } from 'lucide-react'
import { LifeSphere, Event } from '@/types'
import { useSpheres } from '@/hooks/useSpheresQuery'
import { useCreateEvent } from '@/hooks/useEventsQuery'
import { checkAndInitializeSpheres } from '@/utils/initSpheres'

// Lazy loading –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const WheelChart = lazy(() => import('@/components/charts/WheelChart'))
const SphereEditor = lazy(() => import('@/components/charts/SphereEditor'))
const AddEventForm = lazy(() => import('@/components/forms/AddEventForm'))

// Loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è Suspense
const LoadingSpinner = () => (
  <div className="flex items-center justify-center p-8">
    <Loader2 className="w-8 h-8 animate-spin text-primary-500" />
  </div>
)

export default function HomePage() {
  const { user } = useAuth()
  const router = useRouter()
  const [showWheel, setShowWheel] = useState(true)
  const [showEditor, setShowEditor] = useState(false)
  const [showAddEventForm, setShowAddEventForm] = useState(false)
  const [toast, setToast] = useState<{
    message: string
    type: 'success' | 'error' | 'info'
    isVisible: boolean
  }>({
    message: '',
    type: 'info',
    isVisible: false,
  })

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º React Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
  const { data: spheres = [], isLoading: spheresLoading, error: spheresError } = useSpheres()

  // –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  const createEventMutation = useCreateEvent()

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (user) {
      checkAndInitializeSpheres()
    }
  }, [user])

  const mockUser = {
    name: user?.user_metadata?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    avatar: user?.user_metadata?.avatar_url
  }

  const averageScore = spheres.length > 0
    ? Math.round(spheres.reduce((sum, sphere) => sum + sphere.score, 0) / spheres.length)
    : 0

  const handleSphereClick = (sphere: LifeSphere) => {
    console.log('Clicked sphere:', sphere.name)
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã
  }

  const handleAddEvent = () => {
    setShowAddEventForm(true)
  }

  const handleSubmitEvent = async (eventData: Omit<Event, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      await createEventMutation.mutateAsync(eventData)

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setShowAddEventForm(false)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      setToast({
        message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!',
        type: 'success',
        isVisible: true,
      })
    } catch (error) {
      console.error('Error adding event:', error)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      setToast({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è',
        type: 'error',
        isVisible: true,
      })
    }
  }

  const handleNavigateToEvents = () => {
    router.push('/events')
  }

  const handleNavigateToAnalytics = () => {
    router.push('/analytics')
  }

  return (
    <Layout title="–ì–ª–∞–≤–Ω–∞—è" user={mockUser}>
      <div className="p-4 space-y-6">
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        <Card>
          <div className="text-center">
            <h2 className="text-xl font-semibold text-secondary-900 mb-2">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mockUser.name}! üëã
            </h2>
            <p className="text-secondary-600">
              –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–∏
            </p>
          </div>
        </Card>

        {/* –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
        <Card>
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-secondary-900">
              –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏
            </h3>
            <div className="flex space-x-2">
              <Button
                variant={showWheel ? 'primary' : 'secondary'}
                size="sm"
                onClick={() => setShowWheel(true)}
              >
                –ü—Ä–æ—Å–º–æ—Ç—Ä
              </Button>
              <Button
                variant={showEditor ? 'primary' : 'secondary'}
                size="sm"
                onClick={() => setShowEditor(true)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            </div>
          </div>

          <div className="flex gap-6">
            {/* –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏ */}
            <div className="flex-1">
              {spheresLoading ? (
                <LoadingSpinner />
              ) : spheresError ? (
                <div className="text-center text-red-500 p-4">
                  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
                </div>
              ) : (
                <Suspense fallback={<LoadingSpinner />}>
                  {showWheel && (
                    <WheelChart
                      spheres={spheres}
                      onSphereClick={handleSphereClick}
                      className="w-full h-64"
                    />
                  )}
                  {showEditor && (
                    <SphereEditor
                      spheres={spheres}
                      onSpheresChange={() => { }} // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ React Query
                      className="w-full"
                    />
                  )}
                </Suspense>
              )}
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–∞ */}
            <div className="flex flex-col space-y-3 min-w-[120px]">
              <Button
                variant="secondary"
                onClick={handleNavigateToEvents}
                className="flex items-center justify-center space-x-2 h-12"
              >
                <Calendar className="w-4 h-4" />
                <span>–°–æ–±—ã—Ç–∏—è</span>
              </Button>
              <Button
                variant="secondary"
                onClick={handleNavigateToAnalytics}
                className="flex items-center justify-center space-x-2 h-12"
              >
                <TrendingUp className="w-4 h-4" />
                <span>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
              </Button>
            </div>
          </div>
        </Card>

        {/* FAB –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */}
        <FabButton
          icon={Plus}
          onClick={handleAddEvent}
          className="fixed bottom-6 right-6"
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å lazy loading */}
        {showAddEventForm && (
          <Suspense fallback={<LoadingSpinner />}>
            <AddEventForm
              onSubmit={handleSubmitEvent}
              onClose={() => setShowAddEventForm(false)}
              isSubmitting={createEventMutation.isPending}
            />
          </Suspense>
        )}

        {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <Toast
          message={toast.message}
          type={toast.type}
          isVisible={toast.isVisible}
          onClose={() => setToast(prev => ({ ...prev, isVisible: false }))}
        />
      </div>
    </Layout>
  )
}
