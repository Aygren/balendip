import { supabase } from './supabase'
import { Event, LifeSphere, EventFilters, AddEventForm } from '@/types'

// ===== –ö–õ–Æ–ß–ò –î–õ–Ø –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø =====
export const queryKeys = {
    events: {
        all: ['events'] as const,
        lists: () => [...queryKeys.events.all, 'list'] as const,
        list: (filters: string) => [...queryKeys.events.lists(), { filters }] as const,
        details: () => [...queryKeys.events.all, 'detail'] as const,
        detail: (id: string) => [...queryKeys.events.details(), id] as const,
    },
    spheres: {
        all: ['spheres'] as const,
        lists: () => [...queryKeys.spheres.all, 'list'] as const,
        list: (filters: string) => [...queryKeys.spheres.lists(), { filters }] as const,
        details: () => [...queryKeys.spheres.all, 'detail'] as const,
        detail: (id: string) => [...queryKeys.spheres.details(), id] as const,
    },
} as const

// ===== API –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ë–´–¢–ò–ô =====
export const eventsApi = {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    async getAll(filters?: EventFilters): Promise<Event[]> {
        let query = supabase
            .from('events')
            .select('*')
            .order('created_at', { ascending: false })

        if (filters?.search) {
            query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
        }

        if (filters?.date_from) {
            query = query.gte('date', filters.date_from)
        }

        if (filters?.date_to) {
            query = query.lte('date', filters.date_to)
        }

        if (filters?.emotion) {
            query = query.eq('emotion', filters.emotion)
        }

        if (filters?.spheres && filters.spheres.length > 0) {
            query = query.overlaps('spheres', filters.spheres)
        }

        const { data, error } = await query

        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ${error.message}`)
        }

        return data || []
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ ID
    async getById(id: string): Promise<Event> {
        const { data, error } = await supabase
            .from('events')
            .select('*')
            .eq('id', id)
            .single()

        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
        }

        return data
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    async create(eventData: AddEventForm): Promise<Event> {
        const { data: { user } } = await supabase.auth.getUser()

        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        }

        const { data, error } = await supabase
            .from('events')
            .insert([{
                ...eventData,
                user_id: user.id,
            }])
            .select()
            .single()

        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
        }

        return data
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    async update(id: string, updates: Partial<Event>): Promise<Event> {
        const { data, error } = await supabase
            .from('events')
            .update(updates)
            .eq('id', id)
            .select()
            .single()

        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
        }

        return data
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    async delete(id: string): Promise<void> {
        const { error } = await supabase
            .from('events')
            .delete()
            .eq('id', id)

        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
        }
    },

    // –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    async getPaginated(
        page: number = 1,
        limit: number = 20,
        filters?: EventFilters
    ): Promise<{ data: Event[]; count: number; totalPages: number }> {
        let query = supabase
            .from('events')
            .select('*', { count: 'exact' })
            .order('created_at', { ascending: false })

        if (filters?.search) {
            query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
        }

        if (filters?.date_from) {
            query = query.gte('date', filters.date_from)
        }

        if (filters?.date_to) {
            query = query.lte('date', filters.date_to)
        }

        if (filters?.emotion) {
            query = query.eq('emotion', filters.emotion)
        }

        if (filters?.spheres && filters.spheres.length > 0) {
            query = query.overlaps('spheres', filters.spheres)
        }

        const offset = (page - 1) * limit
        query = query.range(offset, offset + limit - 1)

        const { data, error, count } = await query

        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ${error.message}`)
        }

        const totalPages = Math.ceil((count || 0) / limit)

        return {
            data: data || [],
            count: count || 0,
            totalPages,
        }
    },
}

// ===== API –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–§–ï–† –ñ–ò–ó–ù–ò =====
export const spheresApi = {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
    async getAll(): Promise<LifeSphere[]> {
        console.log('üîç spheresApi.getAll() - –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        
        try {
            const { data: { user } } = await supabase.auth.getUser()
            console.log('üë§ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? { id: user.id, email: user.email } : 'null')

            if (!user) {
                console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            }

            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ life_spheres –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
            
            const { data, error } = await supabase
                .from('life_spheres')
                .select('*')
                .eq('user_id', user.id)
                .order('created_at', { ascending: true })

            console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç Supabase:', { data: data?.length || 0, error })

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error)
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏: ${error.message}`)
            }

            console.log('‚úÖ –°—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data?.length || 0)
            return data || []
        } catch (error) {
            console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ spheresApi.getAll():', error)
            throw error
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –ø–æ ID
    async getById(id: string): Promise<LifeSphere> {
        console.log('üîç spheresApi.getById() - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –ø–æ ID:', id)
        
        try {
            const { data, error } = await supabase
                .from('life_spheres')
                .select('*')
                .eq('id', id)
                .single()

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã –ø–æ ID:', error)
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏: ${error.message}`)
            }

            console.log('‚úÖ –°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∞:', data)
            return data
        } catch (error) {
            console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ spheresApi.getById():', error)
            throw error
        }
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
    async create(sphereData: Omit<LifeSphere, 'id' | 'created_at' | 'updated_at'>): Promise<LifeSphere> {
        console.log('üîç spheresApi.create() - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã:', sphereData)
        
        try {
            const { data: { user } } = await supabase.auth.getUser()

            if (!user) {
                console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            }

            const { data, error } = await supabase
                .from('life_spheres')
                .insert([{
                    ...sphereData,
                    user_id: user.id,
                }])
                .select()
                .single()

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã:', error)
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏: ${error.message}`)
            }

            console.log('‚úÖ –°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ —Å–æ–∑–¥–∞–Ω–∞:', data)
            return data
        } catch (error) {
            console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ spheresApi.create():', error)
            throw error
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
    async update(id: string, updates: Partial<LifeSphere>): Promise<LifeSphere> {
        console.log('üîç spheresApi.update() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã:', { id, updates })
        
        try {
            const { data, error } = await supabase
                .from('life_spheres')
                .update(updates)
                .eq('id', id)
                .select()
                .single()

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã:', error)
                throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏: ${error.message}`)
            }

            console.log('‚úÖ –°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data)
            return data
        } catch (error) {
            console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ spheresApi.update():', error)
            throw error
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
    async delete(id: string): Promise<void> {
        console.log('üîç spheresApi.delete() - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã:', id)
        
        try {
            const { error } = await supabase
                .from('life_spheres')
                .delete()
                .eq('id', id)

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã:', error)
                throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏: ${error.message}`)
            }

            console.log('‚úÖ –°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ —É–¥–∞–ª–µ–Ω–∞:', id)
        } catch (error) {
            console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ spheresApi.delete():', error)
            throw error
        }
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä
    async initializeDefaultSpheres(): Promise<LifeSphere[]> {
        console.log('üîç spheresApi.initializeDefaultSpheres() - –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
        
        try {
            const { data: { user } } = await supabase.auth.getUser()

            if (!user) {
                console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            }

            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ñ–µ—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: existingSpheres } = await supabase
                .from('life_spheres')
                .select('id')
                .eq('user_id', user.id)
                .limit(1)

            console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ñ–µ—Ä—ã:', existingSpheres?.length || 0)

            if (existingSpheres && existingSpheres.length > 0) {
                console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å—Ñ–µ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö')
                return this.getAll()
            }

            console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)

            // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ñ–µ—Ä—ã
            const { DEFAULT_SPHERES } = await import('@/utils/initSpheres')
            const spheresToInsert = DEFAULT_SPHERES.map(sphere => ({
                ...sphere,
                user_id: user.id,
                is_default: true,
            }))

            console.log('üìù –°—Ñ–µ—Ä—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', spheresToInsert)

            const { data, error } = await supabase
                .from('life_spheres')
                .insert(spheresToInsert)
                .select()

            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä:', error)
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä: ${error.message}`)
            }

            console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Å—Ñ–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:', data?.length || 0)
            return data || []
        } catch (error) {
            console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ spheresApi.initializeDefaultSpheres():', error)
            throw error
        }
    },
}

// ===== –£–¢–ò–õ–ò–¢–´ =====
export const formatDate = (date: string): string => {
    return new Date(date).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    })
}

export const formatDateTime = (date: string): string => {
    return new Date(date).toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    })
}

export const getEmotionColor = (emotion: string): string => {
    const colors = {
        positive: '#10B981',
        neutral: '#6B7280',
        negative: '#EF4444',
    }
    return colors[emotion as keyof typeof colors] || '#6B7280'
}

export const getEmotionIcon = (emotion: string): string => {
    const icons = {
        positive: 'üòä',
        neutral: 'üòê',
        negative: 'üòî',
    }
    return icons[emotion as keyof typeof icons] || 'üòê'
}
