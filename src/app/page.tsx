'use client'

import React, { useState, Suspense } from 'react'
import { Eye, Edit3, Target, Settings, Sparkles, TrendingUp, User, Calendar } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/hooks/useAuth'
import { useSpheres } from '@/hooks/useSpheres'
import { useOnboarding } from '@/contexts/OnboardingContext'
import Navigation from '@/components/layout/Navigation'
import FabButton from '@/components/ui/FabButton'
import Toast from '@/components/ui/Toast'
import { OnboardingFlow } from '@/components/onboarding/OnboardingFlow'
import { LifeSphere } from '@/types'

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingSpinner = () => (
  <div className="flex items-center justify-center p-8">
    <div className="w-8 h-8 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin"></div>
  </div>
)

// –ö—Ä–∞—Å–∏–≤–æ–µ –∫–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SVG
const LifeWheel = ({
  spheres,
  averageScore,
  isEditing,
  onSphereUpdate
}: {
  spheres: LifeSphere[]
  averageScore: number
  isEditing: boolean
  onSphereUpdate: (sphere: LifeSphere) => void
}) => {
  const wheelSize = 400
  const center = wheelSize / 2
  const radius = 150
  const innerRadius = 80

  const handleSphereClick = (sphere: LifeSphere) => {
    if (!isEditing) return

    // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–∞
    const newScore = prompt(`–ò–∑–º–µ–Ω–∏—Ç–µ –±–∞–ª–ª –¥–ª—è —Å—Ñ–µ—Ä—ã "${sphere.name}" (–æ—Ç 1 –¥–æ 10):`, sphere.score.toString())

    if (newScore !== null) {
      const score = parseInt(newScore)
      if (score >= 1 && score <= 10) {
        const updatedSphere = { ...sphere, score }
        onSphereUpdate(updatedSphere)
      } else {
        alert('–ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!')
      }
    }
  }

  return (
    <div className="w-[300px] h-[300px] md:w-[400px] md:h-[400px] mx-auto relative">
      <svg width={wheelSize} height={wheelSize} className="drop-shadow-2xl" style={{ width: '100%', height: '100%' }}>
        {/* –§–æ–Ω –∫–æ–ª–µ—Å–∞ */}
        <defs>
          <radialGradient id="wheelGradient" cx="50%" cy="50%" r="50%">
            <stop offset="0%" stopColor="#f0f9ff" />
            <stop offset="50%" stopColor="#e0e7ff" />
            <stop offset="100%" stopColor="#fdf2f8" />
          </radialGradient>
        </defs>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ */}
        <circle
          cx={center}
          cy={center}
          r={radius}
          fill="url(#wheelGradient)"
          stroke="#3b82f6"
          strokeWidth="3"
          className="drop-shadow-lg"
        />

        {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ */}
        <circle
          cx={center}
          cy={center}
          r={innerRadius}
          fill="white"
          stroke="#3b82f6"
          strokeWidth="2"
          className="drop-shadow-md"
        />

        {/* –°–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã */}
        {spheres.map((sphere, index) => {
          const startAngle = (index * 360) / spheres.length
          const endAngle = ((index + 1) * 360) / spheres.length
          const startRad = (startAngle - 90) * Math.PI / 180
          const endRad = (endAngle - 90) * Math.PI / 180

          // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫–∏ –¥—É–≥–∏
          const x1 = center + radius * Math.cos(startRad)
          const y1 = center + radius * Math.sin(startRad)
          const x2 = center + radius * Math.cos(endRad)
          const y2 = center + radius * Math.sin(endRad)

          // –§–ª–∞–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥—É–≥
          const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1

          // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
          const pathData = [
            `M ${center} ${center}`,
            `L ${x1} ${y1}`,
            `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,
            'Z'
          ].join(' ')

          return (
            <g key={`sector-${sphere.id}`}>
              {/* –°–µ–∫—Ç–æ—Ä */}
              <path
                d={pathData}
                fill={sphere.color}
                fillOpacity="0.3"
                stroke={sphere.color}
                strokeWidth="2"
                className="transition-all duration-300 hover:fill-opacity-50"
              />

              {/* –õ—É—á */}
              <line
                x1={center}
                y1={center}
                x2={center + radius * Math.cos(startRad)}
                y2={center + radius * Math.sin(startRad)}
                stroke={sphere.color}
                strokeWidth="3"
                strokeLinecap="round"
                className="drop-shadow-sm"
              />
            </g>
          )
        })}

        {/* –°—Ñ–µ—Ä—ã –Ω–∞ –∫–æ–Ω—Ü–∞—Ö –ª—É—á–µ–π */}
        {spheres.map((sphere, index) => {
          const angle = (index * 360) / spheres.length
          const rad = (angle - 90) * Math.PI / 180
          const x = center + radius * Math.cos(rad)
          const y = center + radius * Math.sin(rad)

          return (
            <g key={`sphere-${sphere.id}`}>
              {/* –¢–µ–Ω—å —Å—Ñ–µ—Ä—ã */}
              <circle
                cx={x + 2}
                cy={y + 2}
                r="20"
                fill="rgba(0,0,0,0.2)"
                className="drop-shadow-lg"
              />

              {/* –°—Ñ–µ—Ä–∞ */}
              <circle
                cx={x}
                cy={y}
                r="20"
                fill={sphere.color}
                stroke="white"
                strokeWidth="3"
                className={`drop-shadow-lg transition-all duration-200 ${isEditing ? 'cursor-pointer hover:r-24 hover:stroke-2' : ''
                  }`}
                onClick={() => handleSphereClick(sphere)}
              />

              {/* –ë–∞–ª–ª –≤ —Å—Ñ–µ—Ä–µ */}
              <text
                x={x}
                y={y + 5}
                textAnchor="middle"
                fill="white"
                fontSize="16"
                fontWeight="bold"
                className="drop-shadow-sm pointer-events-none"
              >
                {sphere.score}
              </text>

              {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã */}
              <text
                x={x}
                y={y + 35}
                textAnchor="middle"
                fill={sphere.color}
                fontSize="12"
                fontWeight="600"
                className="drop-shadow-sm pointer-events-none"
              >
                {sphere.name}
              </text>

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
              {isEditing && (
                <text
                  x={x}
                  y={y - 25}
                  textAnchor="middle"
                  fill="#ef4444"
                  fontSize="10"
                  fontWeight="bold"
                  className="drop-shadow-sm pointer-events-none"
                >
                  ‚úèÔ∏è
                </text>
              )}
            </g>
          )
        })}

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ —Å –±–∞–ª–ª–æ–º */}
        <circle
          cx={center}
          cy={center}
          r="60"
          fill="white"
          stroke="#3b82f6"
          strokeWidth="3"
          className="drop-shadow-lg"
        />

        <text
          x={center}
          y={center - 10}
          textAnchor="middle"
          fill="#3b82f6"
          fontSize="32"
          fontWeight="bold"
          className="drop-shadow-sm"
        >
          {averageScore}
        </text>

        <text
          x={center}
          y={center + 15}
          textAnchor="middle"
          fill="#6b7280"
          fontSize="14"
          className="drop-shadow-sm"
        >
          —Å—Ä–µ–¥–Ω–∏–π
        </text>

        <text
          x={center}
          y={center + 30}
          textAnchor="middle"
          fill="#6b7280"
          fontSize="14"
          className="drop-shadow-sm"
        >
          –±–∞–ª–ª
        </text>
      </svg>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {isEditing && (
        <div className="absolute top-4 right-4 bg-green-500 text-white px-3 py-1 rounded-full text-sm font-medium shadow-lg">
          ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é */}
      {isEditing && (
        <div className="absolute bottom-4 left-4 bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium shadow-lg">
          üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å—Ñ–µ—Ä–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–∞
        </div>
      )}
    </div>
  )
}

export default function HomePage() {
  const router = useRouter()
  const { user } = useAuth()
  const { spheres, isLoading: spheresLoading } = useSpheres()
  const { isCompleted: isOnboardingCompleted } = useOnboarding()
  const [showEditor, setShowEditor] = useState(false)
  const [toast, setToast] = useState({ message: '', type: 'success' as const, isVisible: false })
  const [randomEvent, setRandomEvent] = useState('')
  const [localSpheres, setLocalSpheres] = useState<LifeSphere[]>([])
  const [hasChanges, setHasChanges] = useState(false)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ñ–µ—Ä—ã –µ—Å–ª–∏ API –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
  const defaultSpheres = [
    { id: 1, name: '–ó–¥–æ—Ä–æ–≤—å–µ', score: 7, color: '#10B981' },
    { id: 2, name: '–ö–∞—Ä—å–µ—Ä–∞', score: 6, color: '#3B82F6' },
    { id: 3, name: '–§–∏–Ω–∞–Ω—Å—ã', score: 5, color: '#F59E0B' },
    { id: 4, name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', score: 8, color: '#EF4444' },
    { id: 5, name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', score: 7, color: '#8B5CF6' },
    { id: 6, name: '–î–æ—Å—É–≥', score: 6, color: '#EC4899' },
    { id: 7, name: '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å', score: 5, color: '#06B6D4' },
    { id: 8, name: '–û–∫—Ä—É–∂–µ–Ω–∏–µ', score: 7, color: '#84CC16' }
  ] as LifeSphere[]

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ñ–µ—Ä—ã
  React.useEffect(() => {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∏–∑ localStorage
    const savedSpheres = localStorage.getItem('balendip-spheres')
    if (savedSpheres) {
      try {
        const parsed = JSON.parse(savedSpheres)
        setLocalSpheres(parsed)
        setHasChanges(true)
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä:', e)
        const spheresToUse = spheres && spheres.length > 0 ? spheres : defaultSpheres
        setLocalSpheres(spheresToUse)
      }
    } else {
      const spheresToUse = spheres && spheres.length > 0 ? spheres : defaultSpheres
      setLocalSpheres(spheresToUse)
    }
  }, [spheres])

  const displaySpheres = localSpheres.length > 0 ? localSpheres : defaultSpheres
  const averageScore = Math.round(displaySpheres.reduce((sum, sphere) => sum + sphere.score, 0) / displaySpheres.length)

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
  const saveChanges = () => {
    localStorage.setItem('balendip-spheres', JSON.stringify(localSpheres))
    setHasChanges(false)
    setToast({
      message: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
      type: 'success',
      isVisible: true
    })
    setTimeout(() => setToast(prev => ({ ...prev, isVisible: false })), 3000)
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
  const resetToDefault = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º?')) {
      const spheresToUse = spheres && spheres.length > 0 ? spheres : defaultSpheres
      setLocalSpheres(spheresToUse)
      localStorage.removeItem('balendip-spheres')
      setHasChanges(false)
      setToast({
        message: '–°–±—Ä–æ—à–µ–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º',
        type: 'success',
        isVisible: true
      })
      setTimeout(() => setToast(prev => ({ ...prev, isVisible: false })), 3000)
    }
  }

  const handleAddEvent = () => {
    router.push('/events')
  }

  const generateRandomEvent = () => {
    const events = [
      '–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º',
      '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Ä–∞–±–æ—Ç–µ',
      '–ü–æ—Ö–æ–¥ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª',
      '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏',
      '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
      '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
      '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞',
      '–í—Ä–µ–º—è —Å —Å–µ–º—å–µ–π'
    ]
    setRandomEvent(events[Math.floor(Math.random() * events.length)])
  }

  // –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
  if (!isOnboardingCompleted) {
    return <OnboardingFlow />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É */}
      <div className="bg-white/90 backdrop-blur-sm border-b border-secondary-200 px-4 md:px-6 py-3 md:py-4 shadow-sm">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2 md:gap-4">
            <div className="w-10 h-10 md:w-12 md:h-12 bg-gradient-to-br from-primary-500 to-primary-600 rounded-xl flex items-center justify-center shadow-lg">
              <span className="text-white font-bold text-lg md:text-xl">B</span>
            </div>
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-secondary-900">Balendip</h1>
              <p className="text-sm md:text-base text-secondary-600">–ë–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–∏</p>
            </div>
          </div>

          <div className="flex items-center gap-2 md:gap-3">
            <div className="text-right hidden sm:block">
              <p className="font-medium text-secondary-900">{user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</p>
              <p className="text-sm text-secondary-600">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</p>
            </div>
            <div className="w-8 h-8 md:w-10 md:h-10 bg-gradient-to-br from-secondary-400 to-secondary-500 rounded-full flex items-center justify-center">
              <span className="text-white font-semibold text-xs md:text-sm">
                {user?.name?.charAt(0).toUpperCase() || '–ü'}
              </span>
            </div>
            <button onClick={() => router.push('/settings')} className="p-2 hover:bg-secondary-100 rounded-lg transition-colors">
              <Settings className="w-4 h-4 md:w-5 md:h-5 text-secondary-600" />
            </button>
            <button onClick={() => router.push('/onboarding/reset')} className="p-2 md:p-3 hover:bg-secondary-100 rounded-lg transition-colors">
              <span className="text-base md:text-lg text-secondary-600">üîÑ</span>
            </button>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
      <div className="main-page-content min-h-[calc(100vh-200px)] py-8 md:py-12 px-4 md:px-6">
        <div className="w-full max-w-6xl text-center">
          {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
          <div className="mb-8 md:mb-12">
            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold text-secondary-900 mb-4">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Balendip
            </h2>
            <p className="text-lg md:text-xl text-secondary-600 max-w-2xl mx-auto">
              –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –∫–∞–∫ —Å–æ–±—ã—Ç–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ñ–µ—Ä—ã
            </p>
          </div>

          {/* –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏ - –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
          <div className="w-full max-w-4xl mb-12 md:mb-16 px-4">
            <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl border border-secondary-200 p-6 md:p-8">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ */}
              <div className="text-center mb-8">
                <h3 className="text-2xl md:text-3xl font-bold text-secondary-900 mb-6 flex items-center justify-center gap-3">
                  <Target className="w-6 h-6 md:w-8 md:h-8 text-primary-500" />
                  –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏
                </h3>
                <div className="flex justify-center items-center gap-2 md:gap-4 flex-wrap">
                  <button
                    onClick={() => { setShowEditor(false); }}
                    className={`px-4 md:px-6 py-2 md:py-3 rounded-xl font-semibold transition-all duration-200 flex items-center gap-2 text-sm md:text-base ${!showEditor
                      ? 'bg-primary-600 text-white shadow-lg'
                      : 'bg-secondary-200 text-secondary-700 hover:bg-secondary-300'
                      }`}
                  >
                    <Eye className="w-4 h-4" />
                    <span className="hidden sm:inline">–ü—Ä–æ—Å–º–æ—Ç—Ä</span>
                    <span className="sm:hidden">üëÅÔ∏è</span>
                  </button>
                  <button
                    onClick={() => { setShowEditor(true); }}
                    className={`px-4 md:px-6 py-2 md:py-3 rounded-xl font-semibold transition-all duration-200 flex items-center gap-2 text-sm md:text-base ${showEditor
                      ? 'bg-primary-600 text-white shadow-lg'
                      : 'bg-secondary-200 text-secondary-700 hover:bg-secondary-300'
                      }`}
                  >
                    <Edit3 className="w-4 h-4" />
                    <span className="hidden sm:inline">{showEditor ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}</span>
                    <span className="sm:hidden">‚úèÔ∏è</span>
                  </button>

                  {showEditor && hasChanges && (
                    <>
                      <button
                        onClick={saveChanges}
                        className="px-4 md:px-6 py-2 md:py-3 rounded-xl font-semibold transition-all duration-200 flex items-center gap-2 bg-primary-600 text-white shadow-lg hover:bg-primary-700 text-sm md:text-base"
                      >
                        <span className="hidden sm:inline">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
                        <span className="sm:hidden">üíæ</span>
                      </button>
                      <button
                        onClick={resetToDefault}
                        className="px-4 md:px-6 py-2 md:py-3 rounded-xl font-semibold transition-all duration-200 flex items-center gap-2 bg-secondary-600 text-white shadow-lg hover:bg-secondary-700 text-sm md:text-base"
                      >
                        <span className="hidden sm:inline">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</span>
                        <span className="sm:hidden">üîÑ</span>
                      </button>
                    </>
                  )}
                </div>
              </div>

              {/* –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏ */}
              <div className="flex justify-center">
                {spheresLoading ? (
                  <LoadingSpinner />
                ) : (
                  <Suspense fallback={<LoadingSpinner />}>
                    <LifeWheel
                      spheres={displaySpheres}
                      averageScore={averageScore}
                      isEditing={showEditor}
                      onSphereUpdate={(updatedSphere) => {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ñ–µ—Ä—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        const updatedSpheres = localSpheres.map(sphere =>
                          sphere.id === updatedSphere.id ? updatedSphere : sphere
                        )
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        setToast({
                          message: `–ë–∞–ª–ª –¥–ª—è "${updatedSphere.name}" –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${updatedSphere.score}`,
                          type: 'success',
                          isVisible: true
                        })
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        setLocalSpheres(updatedSpheres)
                        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        setHasChanges(true)
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º toast —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        setTimeout(() => setToast(prev => ({ ...prev, isVisible: false })), 3000)
                      }}
                    />
                  </Suspense>
                )}
              </div>
            </div>
          </div>

          {/* –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ - –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
          <div className="w-full max-w-4xl mb-12 md:mb-16 px-4">
            <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl border border-secondary-200 p-6 md:p-8">
              <h3 className="text-xl md:text-2xl font-bold text-secondary-900 mb-6 text-center flex items-center justify-center gap-3">
                <Sparkles className="w-5 h-5 md:w-6 md:h-6 text-primary-500" />
                –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8">
                {/* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è */}
                <div className="text-center">
                  <h4 className="text-base md:text-lg font-semibold text-secondary-800 mb-4">–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ</h4>
                  <button
                    onClick={generateRandomEvent}
                    className="px-4 md:px-6 py-2 md:py-3 rounded-xl font-semibold transition-all duration-200 flex items-center gap-2 mx-auto bg-primary-600 text-white shadow-lg hover:bg-primary-700 text-sm md:text-base"
                  >
                    <Calendar className="w-4 h-4" />
                    <span className="hidden sm:inline">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</span>
                    <span className="sm:hidden">üé≤</span>
                  </button>
                  {randomEvent && (
                    <div className="mt-4 p-3 md:p-4 bg-primary-50 rounded-xl border border-primary-200">
                      <p className="text-primary-800 font-medium text-sm md:text-base">{randomEvent}</p>
                    </div>
                  )}
                </div>

                {/* –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è */}
                <div className="text-center">
                  <h4 className="text-base md:text-lg font-semibold text-secondary-800 mb-4">–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å—Ñ–µ—Ä—ã</h4>
                  <div className="p-3 md:p-4 bg-secondary-50 rounded-xl border border-secondary-200">
                    <TrendingUp className="w-6 h-6 md:w-8 md:h-8 text-secondary-600 mx-auto mb-2" />
                    <p className="text-secondary-700 text-sm md:text-base">
                      {randomEvent
                        ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–∞—à–∏ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏...'
                        : '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
                      }
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª - –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
          <div className="text-center px-4">
            <div className="inline-flex items-center justify-center bg-white/90 backdrop-blur-sm rounded-2xl px-6 md:px-8 py-4 shadow-lg border border-secondary-200">
              <Target className="w-6 h-6 md:w-8 md:h-8 text-primary-500 mr-2 md:mr-3" />
              <span className="text-2xl md:text-3xl font-bold text-primary-600">{averageScore}</span>
              <span className="text-lg md:text-xl text-secondary-600 ml-2 md:ml-3">—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</span>
            </div>
          </div>
        </div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–Ω–∏–∑—É */}
      <Navigation />

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */}
      <FabButton onClick={handleAddEvent} className="fixed bottom-28 right-6" />

      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Toast
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onClose={() => setToast(prev => ({ ...prev, isVisible: false }))}
      />
    </div>
  )
}
