'use client'

import React, { useState, useEffect } from 'react'
import { useOnboarding } from '@/hooks/useOnboarding'
import Card from '@/components/ui/Card'
import Button from '@/components/ui/Button'
import Input from '@/components/ui/Input'
import { User, Target, Heart, TrendingUp, ArrowRight } from 'lucide-react'

interface WelcomeOnboardingProps {
    onComplete: () => void
}

const WelcomeOnboarding: React.FC<WelcomeOnboardingProps> = ({ onComplete }) => {
    const { saveUserData, stepData } = useOnboarding()
    const [currentStep, setCurrentStep] = useState(0)
    const [userName, setUserName] = useState('')
    const [userGoal, setUserGoal] = useState('')

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    useEffect(() => {
        if (stepData.userName) {
            setUserName(stepData.userName)
        }
        if (stepData.userGoal) {
            setUserGoal(stepData.userGoal)
        }
    }, [stepData])

    const steps = [
        {
            title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Balendip! üéâ',
            description: '–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä',
            icon: <User className="w-16 h-16 text-primary-500" />,
            content: (
                <div className="space-y-4">
                    <Input
                        label="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
                        value={userName}
                        onChange={(e) => setUserName(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                        required
                    />
                </div>
            )
        },
        {
            title: '–í–∞—à–∞ —Ü–µ–ª—å üéØ',
            description: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏',
            icon: <Target className="w-16 h-16 text-primary-500" />,
            content: (
                <div className="space-y-4">
                    <Input
                        label="–í–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å"
                        value={userGoal}
                        onChange={(e) => setUserGoal(e.target.value)}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª—É—á—à–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞"
                        required
                    />
                </div>
            )
        },
        {
            title: '–ì–æ—Ç–æ–≤–æ! üöÄ',
            description: '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∏ –Ω–∞—á–Ω–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
            icon: <TrendingUp className="w-16 h-16 text-primary-500" />,
            content: (
                <div className="space-y-4 text-center">
                    <p className="text-secondary-600">
                        –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –¥–ª—è –≤–∞—Å –±–∞–∑–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–µ–±—è
                    </p>
                </div>
            )
        }
    ]

    const handleNext = () => {
        if (currentStep < steps.length - 1) {
            setCurrentStep(currentStep + 1)
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            saveUserData(userName, userGoal)
            onComplete()
        }
    }

    const handleSkip = () => {
        onComplete()
    }

    const canProceed = () => {
        if (currentStep === 0) return userName.trim().length > 0
        if (currentStep === 1) return userGoal.trim().length > 0
        return true
    }

    const buttonStyle: React.CSSProperties = {
        fontSize: '20px', // –¢–∞–∫–æ–π –∂–µ —Ä–∞–∑–º–µ—Ä, –∫–∞–∫ —É –æ–ø–∏—Å–∞–Ω–∏—è (text-xl)
        fontWeight: 'bold',
        padding: '16px 22px', // –£–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 30% —Å 24px 32px
        minHeight: '56px', // –£–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 30% —Å 80px
        borderRadius: '12px', // –£–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 30% —Å 16px
        border: '2px solid', // –£–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 30% —Å 3px
        cursor: 'pointer',
        transition: 'all 0.2s ease',
    }

    const primaryButtonStyle: React.CSSProperties = {
        ...buttonStyle,
        backgroundColor: '#0ea5e9',
        color: 'white',
        borderColor: '#0ea5e9',
    }

    const secondaryButtonStyle: React.CSSProperties = {
        ...buttonStyle,
        backgroundColor: '#f1f5f9',
        color: '#0f172a',
        borderColor: '#cbd5e1',
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50 flex items-center justify-center p-4">
            <Card className="w-full max-w-2xl">
                <div className="text-center space-y-8">
                    {/* –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div className="flex justify-center">
                        {steps[currentStep].icon}
                    </div>

                    <div className="space-y-4">
                        <h1 className="text-4xl font-bold text-secondary-900">
                            {steps[currentStep].title}
                        </h1>
                        <p className="text-xl text-secondary-600">
                            {steps[currentStep].description}
                        </p>
                    </div>

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–∞ */}
                    <div className="min-h-[160px] flex items-center">
                        {steps[currentStep].content}
                    </div>

                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                    <div className="flex justify-center space-x-3">
                        {steps.map((_, index) => (
                            <div
                                key={index}
                                className={`w-3 h-3 rounded-full ${index <= currentStep ? 'bg-primary-500' : 'bg-secondary-200'
                                    }`}
                            />
                        ))}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <div className="flex space-x-4">
                        {currentStep < steps.length - 1 && (
                            <button
                                style={secondaryButtonStyle}
                                onClick={handleSkip}
                                className="flex-1 hover:bg-secondary-200 active:scale-95"
                            >
                                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                            </button>
                        )}
                        <button
                            style={primaryButtonStyle}
                            onClick={handleNext}
                            disabled={!canProceed()}
                            className={`flex-1 hover:bg-primary-700 active:scale-95 ${!canProceed() ? 'opacity-50 cursor-not-allowed' : ''}`}
                        >
                            {currentStep === steps.length - 1 ? '–ù–∞—á–∞—Ç—å' : '–î–∞–ª–µ–µ'}
                            <ArrowRight className="w-6 h-6 ml-2 inline" />
                        </button>
                    </div>
                </div>
            </Card>
        </div>
    )
}

export default WelcomeOnboarding
