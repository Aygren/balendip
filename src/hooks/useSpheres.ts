import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { spheresApi, queryKeys } from '@/lib/api'
import { LifeSphere } from '@/types'

// ===== –•–£–ö–ò –î–õ–Ø –°–§–ï–† –ñ–ò–ó–ù–ò =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
export const useSpheres = () => {
    console.log('üîç useSpheres() - —Ö—É–∫ –≤—ã–∑–≤–∞–Ω')

    const query = useQuery({
        queryKey: queryKeys.spheres.lists(),
        queryFn: spheresApi.getAll,
        staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç (—Å—Ñ–µ—Ä—ã —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è)
        gcTime: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
        retry: (failureCount, error) => {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ${failureCount + 1} –¥–ª—è —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏:`, error)
            // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (error?.message?.includes('auth') || error?.message?.includes('unauthorized')) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å')
                return false
            }
            return failureCount < 3
        },
        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
        refetchOnWindowFocus: false, // –ù–µ —Ä–µ—Ñ–µ—Ç—á–∏–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
        refetchOnMount: true, // –†–µ—Ñ–µ—Ç—á–∏–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        onSuccess: (data) => {
            console.log('‚úÖ useSpheres - —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', data?.length || 0)
        },
        onError: (error) => {
            console.error('‚ùå useSpheres - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
        },
        onSettled: (data, error) => {
            console.log('üèÅ useSpheres - –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω:', {
                hasData: !!data,
                dataLength: data?.length || 0,
                hasError: !!error
            })
        }
    })

    console.log('üìä useSpheres - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:', {
        isLoading: query.isLoading,
        isError: query.isError,
        isSuccess: query.isSuccess,
        data: query.data?.length || 0,
        error: query.error
    })

    return query
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –ø–æ ID
export const useSphere = (id: string) => {
    return useQuery({
        queryKey: queryKeys.spheres.detail(id),
        queryFn: () => spheresApi.getById(id),
        enabled: !!id,
        staleTime: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
        gcTime: 60 * 60 * 1000, // 1 —á–∞—Å
        retry: (failureCount, error) => {
            if (error?.message?.includes('auth') || error?.message?.includes('unauthorized')) {
                return false
            }
            return failureCount < 2
        },
    })
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
export const useCreateSphere = () => {
    const queryClient = useQueryClient()

    return useMutation({
        mutationFn: spheresApi.create,
        onSuccess: (newSphere) => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ —Å—Ñ–µ—Ä
            queryClient.invalidateQueries({ queryKey: queryKeys.spheres.lists() })

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ñ–µ—Ä—É –≤ –∫–µ—à
            queryClient.setQueryData(queryKeys.spheres.detail(newSphere.id), newSphere)
        },
        onError: (error) => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏:', error)
        },
    })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
export const useUpdateSphere = () => {
    const queryClient = useQueryClient()

    return useMutation({
        mutationFn: ({ id, ...updates }: { id: string } & Partial<LifeSphere>) =>
            spheresApi.update(id, updates),
        onSuccess: (updatedSphere) => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ —Å—Ñ–µ—Ä
            queryClient.invalidateQueries({ queryKey: queryKeys.spheres.lists() })

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ñ–µ—Ä—É –≤ –∫–µ—à–µ
            queryClient.setQueryData(queryKeys.spheres.detail(updatedSphere.id), updatedSphere)
        },
        onError: (error) => {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏:', error)
        },
    })
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
export const useDeleteSphere = () => {
    const queryClient = useQueryClient()

    return useMutation({
        mutationFn: spheresApi.delete,
        onSuccess: (_, deletedId) => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ —Å—Ñ–µ—Ä
            queryClient.invalidateQueries({ queryKey: queryKeys.spheres.lists() })

            // –£–¥–∞–ª—è–µ–º —Å—Ñ–µ—Ä—É –∏–∑ –∫–µ—à–∞
            queryClient.removeQueries({ queryKey: queryKeys.spheres.detail(deletedId) })
        },
        onError: (error) => {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏:', error)
        },
    })
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä
export const useInitializeSpheres = () => {
    const queryClient = useQueryClient()

    return useMutation({
        mutationFn: spheresApi.initializeDefaultSpheres,
        onSuccess: (spheres) => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ —Å—Ñ–µ—Ä
            queryClient.invalidateQueries({ queryKey: queryKeys.spheres.lists() })

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã –≤ –∫–µ—à
            spheres.forEach(sphere => {
                queryClient.setQueryData(queryKeys.spheres.detail(sphere.id), sphere)
            })
        },
        onError: (error) => {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏:', error)
        },
    })
}

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –°–§–ï–† =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã –ø–æ ID
export const useSphereName = (sphereId: string, spheres: LifeSphere[]): string => {
    const sphere = spheres.find(s => s.id === sphereId)
    return sphere?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ñ–µ—Ä—ã –ø–æ ID
export const useSphereColor = (sphereId: string, spheres: LifeSphere[]): string => {
    const sphere = spheres.find(s => s.id === sphereId)
    return sphere?.color || '#6B7280'
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ñ–µ—Ä—ã –ø–æ ID
export const useSphereIcon = (sphereId: string, spheres: LifeSphere[]): string => {
    const sphere = spheres.find(s => s.id === sphereId)
    return sphere?.icon || '‚ùì'
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ñ–µ—Ä –ø–æ –ø–æ–∏—Å–∫—É
export const useFilteredSpheres = (spheres: LifeSphere[], search: string): LifeSphere[] => {
    if (!search.trim()) return spheres

    const searchLower = search.toLowerCase()
    return spheres.filter(sphere =>
        sphere.name.toLowerCase().includes(searchLower) ||
        sphere.icon.includes(searchLower)
    )
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ñ–µ—Ä –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
export const useSortedSpheres = (
    spheres: LifeSphere[],
    sortBy: 'name' | 'score' | 'created_at' = 'name'
): LifeSphere[] => {
    return [...spheres].sort((a, b) => {
        switch (sortBy) {
            case 'name':
                return a.name.localeCompare(b.name)
            case 'score':
                return b.score - a.score
            case 'created_at':
                return new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
            default:
                return 0
        }
    })
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ñ–µ—Ä–∞–º
export const useSpheresStats = (spheres: LifeSphere[]) => {
    if (spheres.length === 0) {
        return {
            total: 0,
            averageScore: 0,
            highestScore: 0,
            lowestScore: 0,
            activeSpheres: 0,
        }
    }

    const scores = spheres.map(s => s.score)
    const total = spheres.length
    const averageScore = Math.round(scores.reduce((sum, score) => sum + score, 0) / total)
    const highestScore = Math.max(...scores)
    const lowestScore = Math.min(...scores)
    const activeSpheres = spheres.filter(s => s.score > 5).length

    return {
        total,
        averageScore,
        highestScore,
        lowestScore,
        activeSpheres,
    }
}
