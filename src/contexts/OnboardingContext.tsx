'use client'

import React, { createContext, useContext, ReactNode, useState, useCallback, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { LifeSphere } from '@/types'

// ===== –ö–û–ù–¢–ï–ö–°–¢ –û–ù–ë–û–†–î–ò–ù–ì–ê =====

export interface OnboardingData {
  userName: string
  userGoal: string
  selectedSpheres: string[]
  spheres: LifeSphere[]
}

export interface OnboardingContextType {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  currentStep: number
  data: OnboardingData
  isCompleted: boolean
  isLoading: boolean

  // –î–µ–π—Å—Ç–≤–∏—è
  setUserName: (name: string) => void
  setUserGoal: (goal: string) => void
  setSelectedSpheres: (sphereIds: string[]) => void
  setSpheres: (spheres: LifeSphere[]) => void
  goToNextStep: () => void
  goToPreviousStep: () => void
  goToStep: (step: number) => void
  completeOnboarding: () => void
  resetOnboarding: () => void

  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  canProceed: (localData?: Partial<OnboardingData>) => boolean
  canGoBack: boolean
  progressPercentage: number
}

const OnboardingContext = createContext<OnboardingContextType | undefined>(undefined)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
export const ONBOARDING_STEPS = {
  WELCOME: 1,
  SPHERE_SELECTION: 2,
  SPHERE_SETUP: 3,
  COMPLETE: 4
} as const

export type OnboardingStep = typeof ONBOARDING_STEPS[keyof typeof ONBOARDING_STEPS]

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
const DEFAULT_SPHERES: LifeSphere[] = [
  { id: '1', user_id: '', name: '–ó–¥–æ—Ä–æ–≤—å–µ', score: 5, color: '#10B981', icon: 'üè•', is_default: true, created_at: '', updated_at: '' },
  { id: '2', user_id: '', name: '–ö–∞—Ä—å–µ—Ä–∞', score: 5, color: '#3B82F6', icon: 'üíº', is_default: true, created_at: '', updated_at: '' },
  { id: '3', user_id: '', name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', score: 5, color: '#F59E0B', icon: '‚ù§Ô∏è', is_default: true, created_at: '', updated_at: '' },
  { id: '4', user_id: '', name: '–§–∏–Ω–∞–Ω—Å—ã', score: 5, color: '#8B5CF6', icon: 'üí∞', is_default: true, created_at: '', updated_at: '' },
  { id: '5', user_id: '', name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', score: 5, color: '#06B6D4', icon: 'üìö', is_default: true, created_at: '', updated_at: '' },
  { id: '6', user_id: '', name: '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å', score: 5, color: '#EC4899', icon: 'üßò', is_default: true, created_at: '', updated_at: '' },
  { id: '7', user_id: '', name: '–û—Ç–¥—ã—Ö', score: 5, color: '#F97316', icon: 'üèñÔ∏è', is_default: true, created_at: '', updated_at: '' },
  { id: '8', user_id: '', name: '–û–∫—Ä—É–∂–µ–Ω–∏–µ', score: 5, color: '#84CC16', icon: 'üë•', is_default: true, created_at: '', updated_at: '' },
]

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const STORAGE_KEYS = {
  ONBOARDING_DATA: 'onboardingData',
  ONBOARDING_STEP: 'onboardingStep',
  ONBOARDING_COMPLETE: 'onboardingComplete'
} as const

const isBrowser = () => typeof window !== 'undefined'

function getStorageItem<T>(key: string, defaultValue: T): T {
  if (!isBrowser()) return defaultValue

  try {
    const item = localStorage.getItem(key)
    return item ? JSON.parse(item) : defaultValue
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage –¥–ª—è –∫–ª—é—á–∞ ${key}:`, error)
    return defaultValue
  }
}

function setStorageItem<T>(key: string, value: T): void {
  if (!isBrowser()) return

  try {
    localStorage.setItem(key, JSON.stringify(value))
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ localStorage –¥–ª—è –∫–ª—é—á–∞ ${key}:`, error)
  }
}

const removeStorageItem = (key: string): void => {
  if (!isBrowser()) return

  try {
    localStorage.removeItem(key)
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage –¥–ª—è –∫–ª—é—á–∞ ${key}:`, error)
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
export const OnboardingProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(true)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
  const [state, setState] = useState<{
    currentStep: number
    data: OnboardingData
    isCompleted: boolean
  }>(() => {
    const isCompleted = getStorageItem(STORAGE_KEYS.ONBOARDING_COMPLETE, false)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å currentStep
    let currentStep = getStorageItem(STORAGE_KEYS.ONBOARDING_STEP, ONBOARDING_STEPS.WELCOME)
    if (currentStep < ONBOARDING_STEPS.WELCOME || currentStep > ONBOARDING_STEPS.COMPLETE) {
      console.log('‚ö†Ô∏è Invalid currentStep from localStorage:', currentStep, 'resetting to WELCOME')
      currentStep = ONBOARDING_STEPS.WELCOME
    }

    const data = getStorageItem<OnboardingData>(STORAGE_KEYS.ONBOARDING_DATA, {
      userName: '',
      userGoal: '',
      selectedSpheres: [],
      spheres: DEFAULT_SPHERES
    })

    console.log('OnboardingContext: Initializing state from localStorage:', {
      isCompleted,
      currentStep,
      data
    })

    return {
      currentStep,
      data,
      isCompleted
    }
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('OnboardingContext: Component mounted, setting isLoading to false')
    setIsLoading(false)
  }, [])

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (!isLoading) {
      console.log('OnboardingContext: Saving state to localStorage:', {
        step: state.currentStep,
        data: state.data,
        isCompleted: state.isCompleted
      })
      setStorageItem(STORAGE_KEYS.ONBOARDING_STEP, state.currentStep)
      setStorageItem(STORAGE_KEYS.ONBOARDING_DATA, state.data)
    } else {
      console.log('OnboardingContext: Still loading, not saving state')
    }
  }, [state, isLoading])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const updateState = useCallback((updates: Partial<typeof state> | ((prev: typeof state) => typeof state)) => {
    console.log('=== updateState called ===')
    console.log('Updates:', updates)

    setState(prev => {
      const newState = typeof updates === 'function' ? updates(prev) : { ...prev, ...updates }
      console.log('Current state before update:', prev)
      console.log('New state after update:', newState)
      return newState
    })
  }, []) // –£–±–∏—Ä–∞–µ–º state –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const setUserName = useCallback((userName: string) => {
    console.log('OnboardingContext: setUserName called with:', userName)
    console.log('OnboardingContext: Current state before setUserName:', state)
    updateState(prev => {
      const newState = {
        ...prev,
        data: { ...prev.data, userName }
      }
      console.log('OnboardingContext: New state after setUserName:', newState)
      return newState
    })
  }, [updateState, state])

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const setUserGoal = useCallback((userGoal: string) => {
    console.log('OnboardingContext: setUserGoal called with:', userGoal)
    console.log('OnboardingContext: Current state before setUserGoal:', state)
    updateState(prev => {
      const newState = {
        ...prev,
        data: { ...prev.data, userGoal }
      }
      console.log('OnboardingContext: New state after setUserGoal:', newState)
      return newState
    })
  }, [updateState, state])

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã
  const setSelectedSpheres = useCallback((selectedSpheres: string[]) => {
    console.log('OnboardingContext: setSelectedSpheres called with:', selectedSpheres)
    updateState(prev => ({
      ...prev,
      data: { ...prev.data, selectedSpheres }
    }))
  }, [updateState])

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã
  const setSpheres = useCallback((spheres: LifeSphere[]) => {
    console.log('OnboardingContext: setSpheres called with:', spheres)
    updateState(prev => ({
      ...prev,
      data: { ...prev.data, spheres }
    }))
  }, [updateState])

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const completeOnboarding = useCallback(() => {
    console.log('OnboardingContext: completeOnboarding called')
    setStorageItem(STORAGE_KEYS.ONBOARDING_COMPLETE, true)
    removeStorageItem(STORAGE_KEYS.ONBOARDING_DATA)
    removeStorageItem(STORAGE_KEYS.ONBOARDING_STEP)

    updateState({ isCompleted: true })

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    try {
      if (router) {
        console.log('‚úÖ Router available, redirecting to /')
        router.push('/')
      } else {
        console.log('‚ùå Router not available, using window.location')
        window.location.href = '/'
      }
    } catch (error) {
      console.error('Error during navigation:', error)
      // Fallback to window.location
      window.location.href = '/'
    }
  }, [router, updateState])

  // –°–±—Ä–æ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const resetOnboarding = useCallback(() => {
    console.log('OnboardingContext: resetOnboarding called')
    removeStorageItem(STORAGE_KEYS.ONBOARDING_COMPLETE)
    removeStorageItem(STORAGE_KEYS.ONBOARDING_DATA)
    removeStorageItem(STORAGE_KEYS.ONBOARDING_STEP)

    updateState({
      currentStep: ONBOARDING_STEPS.WELCOME,
      data: {
        userName: '',
        userGoal: '',
        selectedSpheres: [],
        spheres: DEFAULT_SPHERES
      },
      isCompleted: false
    })
  }, [updateState])

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const goToNextStep = useCallback(() => {
    console.log('=== goToNextStep called ===')
    console.log('Current state:', state)

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —à–∞–≥–∞ WELCOME
    if (state.currentStep === ONBOARDING_STEPS.WELCOME) {
      if (state.data.userName && state.data.userGoal) {
        console.log('‚úÖ Welcome step: can proceed, moving to next step')
        setState(prev => ({ ...prev, currentStep: ONBOARDING_STEPS.SPHERE_SELECTION }))
        return
      } else {
        console.log('‚ùå Welcome step: missing userName or userGoal')
        return
      }
    }

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤
    if (state.currentStep === ONBOARDING_STEPS.SPHERE_SELECTION) {
      if (state.data.selectedSpheres.length > 0) {
        console.log('‚úÖ Sphere selection: can proceed, moving to next step')
        setState(prev => ({ ...prev, currentStep: ONBOARDING_STEPS.SPHERE_SETUP }))
        return
      }
    }

    if (state.currentStep === ONBOARDING_STEPS.SPHERE_SETUP) {
      if (state.data.selectedSpheres.length > 0) {
        console.log('‚úÖ Sphere setup: can proceed, moving to next step')
        setState(prev => ({ ...prev, currentStep: ONBOARDING_STEPS.COMPLETE }))
        return
      }
    }

    if (state.currentStep === ONBOARDING_STEPS.COMPLETE) {
      console.log('‚úÖ Complete step: finishing onboarding')
      completeOnboarding()
      return
    }

    console.log('‚ùå Cannot proceed from current step:', state.currentStep)
  }, [state, completeOnboarding])

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
  const goToPreviousStep = useCallback(() => {
    console.log('OnboardingContext: goToPreviousStep called')
    updateState(prev => {
      console.log('goToPreviousStep: currentStep:', prev.currentStep)
      if (prev.currentStep > ONBOARDING_STEPS.WELCOME) {
        const prevStep = prev.currentStep - 1
        console.log('Moving to previous step:', prevStep)
        return { ...prev, currentStep: prevStep }
      } else {
        console.log('Cannot go back: already at first step')
        return prev
      }
    })
  }, [updateState])

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É
  const goToStep = useCallback((step: number) => {
    console.log('OnboardingContext: goToStep called with:', step)
    updateState(prev => {
      if (step >= ONBOARDING_STEPS.WELCOME && step <= ONBOARDING_STEPS.COMPLETE) {
        console.log('Moving to step:', step)
        return { ...prev, currentStep: step }
      } else {
        console.log('Invalid step:', step, 'must be between', ONBOARDING_STEPS.WELCOME, 'and', ONBOARDING_STEPS.COMPLETE)
        return prev
      }
    })
  }, [updateState])

  const contextValue: OnboardingContextType = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    currentStep: state.currentStep,
    data: state.data,
    isCompleted: state.isCompleted,
    isLoading,

    // –î–µ–π—Å—Ç–≤–∏—è
    setUserName,
    setUserGoal,
    setSelectedSpheres,
    setSpheres,
    goToNextStep,
    goToPreviousStep,
    goToStep,
    completeOnboarding,
    resetOnboarding,

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    canProceed: (localData?: Partial<OnboardingData>) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const dataToCheck = localData ? { ...state.data, ...localData } : state.data

      console.log('canProceed called with:', { localData, dataToCheck, currentStep: state.currentStep })

      switch (state.currentStep) {
        case ONBOARDING_STEPS.WELCOME:
          const canProceedWelcome = !!(dataToCheck.userName && dataToCheck.userGoal)
          console.log('Welcome step canProceed:', canProceedWelcome, { userName: dataToCheck.userName, userGoal: dataToCheck.userGoal })
          return canProceedWelcome
        case ONBOARDING_STEPS.SPHERE_SELECTION:
          const canProceedSpheres = dataToCheck.selectedSpheres.length > 0
          console.log('Sphere step canProceed:', canProceedSpheres, { selectedSpheres: dataToCheck.selectedSpheres })
          return canProceedSpheres
        case ONBOARDING_STEPS.SPHERE_SETUP:
          const canProceedSetup = dataToCheck.selectedSpheres.length > 0
          console.log('Setup step canProceed:', canProceedSetup, { selectedSpheres: dataToCheck.selectedSpheres })
          return canProceedSetup
        case ONBOARDING_STEPS.COMPLETE:
          return true
        default:
          return false
      }
    },
    canGoBack: state.currentStep > ONBOARDING_STEPS.WELCOME,
    progressPercentage: Math.round((state.currentStep / ONBOARDING_STEPS.COMPLETE) * 100)
  }

  return (
    <OnboardingContext.Provider value={contextValue}>
      {children}
    </OnboardingContext.Provider>
  )
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
export const useOnboarding = (): OnboardingContextType => {
  const context = useContext(OnboardingContext)

  if (context === undefined) {
    throw new Error('useOnboarding –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ OnboardingProvider')
  }

  return context
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
export const useOnboardingStep = (): number => {
  const { currentStep } = useOnboarding()
  return currentStep
}

export const useOnboardingData = (): OnboardingData => {
  const { data } = useOnboarding()
  return data
}

export const useIsOnboardingCompleted = (): boolean => {
  const { isCompleted } = useOnboarding()
  return isCompleted
}
